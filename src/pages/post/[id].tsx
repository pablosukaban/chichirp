import { type GetStaticProps, type NextPage } from 'next';
import Head from 'next/head';
import { PostView } from '~/components/postview';
import { generateSSRHelper } from '~/server/helpers/ssgHelper';
import { useRouter } from 'next/router';
import { api } from '~/utils/api';

import dayjs from 'dayjs';
import 'dayjs/locale/ru';

import relativeTime from 'dayjs/plugin/relativeTime';

import { CommentView } from '~/components/commentview';
import { Loader2 } from 'lucide-react';
import { LoadingPage } from '~/components/ui/loading';
import { ScrollArea } from '~/components/ui/scroll-area';
import { Separator } from '~/components/ui/separator';
import { Input } from '~/components/ui/input';
import { Button } from '~/components/ui/button';

dayjs.extend(relativeTime);
dayjs.locale('ru');

const SinglePostPage: NextPage<{ id: string }> = ({ id }) => {
    const { data: postWithAutor } = api.posts.getById.useQuery({ id });
    const { data: commentsData, isLoading: commentsLoading } =
        api.comments.getAll.useQuery({ postId: id });

    const router = useRouter();

    const ctx = api.useContext();

    const onSuccess = () => {
        void ctx.posts.getAll.invalidate();
        void router.push('/');
    };

    if (!postWithAutor) return null;

    return (
        <>
            <Head>
                <title>Single post page</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="shortcut icon" href="/favicon.ico" />
            </Head>
            <main className="h-full space-y-2 justify-self-start ">
                <div className="rounded-md border p-6">
                    <h1 className="ml-2 text-lg font-medium">Пост</h1>
                    <PostView
                        {...postWithAutor}
                        onSuccess={onSuccess}
                        isSeparatorNeeded={false}
                    />
                </div>
                <div className="rounded-md border p-4">
                    <h1 className="mb-2 text-center font-semibold">
                        Напишите комментарий!
                    </h1>
                    <div className="flex gap-2">
                        <Input placeholder="Ваш комментарий" />
                        <Button>Отправить</Button>
                    </div>
                </div>
                {commentsLoading && <LoadingPage />}
                <ScrollArea className={'w-full rounded-md border'}>
                    <div className="p-4">
                        {!commentsData || commentsData?.length === 0 ? (
                            <h1 className="ml-2 text-center text-base font-medium">
                                У этого поста пока нет комментариев. <br />
                                Будьте первым!
                            </h1>
                        ) : (
                            <div>
                                {commentsData.map((item) => (
                                    <CommentView
                                        {...item}
                                        key={item.comment.id}
                                    />
                                ))}
                            </div>
                        )}
                    </div>
                </ScrollArea>
            </main>
        </>
    );
};

export const getStaticProps: GetStaticProps = async (context) => {
    const helpers = generateSSRHelper();

    const id = context.params?.id;

    if (typeof id !== 'string') throw new Error('id must be a string');

    await helpers.posts.getById.prefetch({ id });

    return {
        props: {
            trpcState: helpers.dehydrate(),
            id,
        },
    };
};

export const getStaticPaths = () => {
    return {
        paths: [],
        fallback: 'blocking',
    };
};

export default SinglePostPage;
